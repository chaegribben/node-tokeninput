{"majorversion": 3, "filemap": {"node-tokeninput.js": {"classlist": ["Plugin.TokenInput"], "name": "node-tokeninput.js", "module": "gallery-node-tokeninput"}}, "modules": {"gallery-node-tokeninput": {"description": "Node plugin that turns a text input field into a tokenized input field\nsimilar to Cocoa's NSTokenField control.", "submodules": [], "classlist": ["Plugin.TokenInput"], "filelist": ["node-tokeninput.js"], "subdata": {}, "name": "gallery-node-tokeninput"}}, "classmap": {"Plugin.TokenInput": {"name": "Plugin.TokenInput", "constructors": [{"params": [{"type": "Object", "name": "config", "description": " Configuration object."}], "description": "Node plugin that turns a text input field into a tokenized input field\nsimilar to Cocoa's NSTokenField control."}], "namespace": "Plugin", "module": "gallery-node-tokeninput", "events": {"listNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "listNodeChange", "description": "Fires when the value for the configuration attribute 'listNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "delimiterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "delimiterChange", "description": "Fires when the value for the configuration attribute 'delimiter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "removeButtonChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "removeButtonChange", "description": "Fires when the value for the configuration attribute 'removeButton' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "inputNodeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "inputNodeChange", "description": "Fires when the value for the configuration attribute 'inputNode' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tokenizeOnEnterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tokenizeOnEnterChange", "description": "Fires when the value for the configuration attribute 'tokenizeOnEnter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "contentBoxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "contentBoxChange", "description": "Fires when the value for the configuration attribute 'contentBox' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tokensChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tokensChange", "description": "Fires when the value for the configuration attribute 'tokens' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "boundingBoxChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "boundingBoxChange", "description": "Fires when the value for the configuration attribute 'boundingBox' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "tokenizeOnBlurChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "tokenizeOnBlurChange", "description": "Fires when the value for the configuration attribute 'tokenizeOnBlur' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "fauxInputChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "fauxInputChange", "description": "Fires when the value for the configuration attribute 'fauxInput' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "doc", "methods": {"_keyBackspace": {"return": {"type": "Boolean", "description": "<code>false</code> if the event should not be\nprevented."}, "description": "Handler for the backspace key.", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_keyBackspace", "guessedtype": "function"}, "_keyUp": {"return": {"type": "Boolean", "description": "<code>false</code> if the event should not be\nprevented."}, "description": "Handler for the up arrow key.", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_keyUp", "guessedtype": "function"}, "_focusPrev": {"return": {"type": "Boolean", "description": "<code>true</code> if focus was set, <code>false</code>\notherwise."}, "description": "Focuses the token before the specified item node, if any.", "protected": "", "params": [{"type": "Node", "name": "node", "description": ""}], "guessedname": "_focusPrev", "guessedtype": "function"}, "_syncHost": {"protected": "", "description": "Synchronizes the value of the host input field with the current set of\ntokens in the tokenInput, joined with the configured\n<code>delimiter</code>.", "guessedname": "_syncHost", "guessedtype": "function"}, "_onTokenFocus": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "description": "Handles focus events on tokens.", "guessedname": "_onTokenFocus", "guessedtype": "function"}, "_onRemoveClick": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "description": "Handles click events on token remove buttons.", "guessedname": "_onRemoveClick", "guessedtype": "function"}, "_bind": {"protected": "", "description": "Binds token input events.", "guessedname": "_bind", "guessedtype": "function"}, "_onKey": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "description": "Handles keydown or keypress events on tokens and the token input field.", "guessedname": "_onKey", "guessedtype": "function"}, "_render": {"protected": "", "description": "Renders the token input markup.", "guessedname": "_render", "guessedtype": "function"}, "_onTokenMouseOver": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "description": "Handles mouseover events on tokens.", "guessedname": "_onTokenMouseOver", "guessedtype": "function"}, "_afterBlur": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "description": "Handles blur events on the bounding box.", "guessedname": "_afterBlur", "guessedtype": "function"}, "_afterRemoveButtonChange": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "description": "Handles changes to the <code>removeButton</code> attribute.", "guessedname": "_afterRemoveButtonChange", "guessedtype": "function"}, "_afterTokensChange": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "description": "Handles changes to the <code>tokens</code> attribute.", "guessedname": "_afterTokensChange", "guessedtype": "function"}, "_afterFauxInputChange": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "description": "Handles changes to the <code>fauxInput</code> attribute.", "guessedname": "_afterFauxInputChange", "guessedtype": "function"}, "_keyDown": {"return": {"type": "Boolean", "description": "<code>false</code> if the event should not be\nprevented."}, "description": "Handler for the down arrow key.", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_keyDown", "guessedtype": "function"}, "add": {"chainable": "", "params": [{"type": "Array|String", "name": "newTokens", "description": " Token string or array of token strings."}, {"type": "Number", "name": "index", "description": " (optional) 0-based index at which to add the token."}], "description": "Adds one or more tokens at the specified index, or at the end of the\ntoken list if no index is specified.", "guessedname": "add", "guessedtype": "function"}, "_keyRight": {"return": {"type": "Boolean", "description": "<code>false</code> if the event should not be\nprevented."}, "description": "Handler for the right arrow key.", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_keyRight", "guessedtype": "function"}, "_focusNext": {"return": {"type": "Boolean", "description": "<code>true</code> if focus was set, <code>false</code>\notherwise."}, "description": "Focuses the token after the specified item node, or the input node if\nthere is no next token.", "protected": "", "params": [{"type": "Node", "name": "node", "description": ""}], "guessedname": "_focusNext", "guessedtype": "function"}, "_keyDelete": {"return": {"type": "Boolean", "description": "<code>false</code> if the event should not be\nprevented."}, "description": "Handler for the delete key.", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_keyDelete", "guessedtype": "function"}, "_afterInputValueChange": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "description": "Handles <code>valueChange</code> events on the token input node.", "guessedname": "_afterInputValueChange", "guessedtype": "function"}, "_sync": {"protected": "", "description": "Synchronizes the tokenInput's UI state with the internal state.", "guessedname": "_sync", "guessedtype": "function"}, "_clearItems": {"protected": "", "description": "Removes and purges all items from the list, including the input field.", "guessedname": "_clearItems", "guessedtype": "function"}, "_refresh": {"protected": "", "description": "Refreshes the <code>_tokenNodes</code> NodeList, which is used internally\nto track token item nodes.", "guessedname": "_refresh", "guessedtype": "function"}, "_keyEnter": {"return": {"type": "Boolean", "description": "<code>false</code> if the event should not be\nprevented."}, "description": "Handler for the enter key.", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_keyEnter", "guessedtype": "function"}, "_setTokens": {"return": {"type": "Array", "description": "Array of trimmed token strings, with any empty strings\nremoved."}, "description": "Setter for the <code>tokens</code> attribute.", "protected": "", "params": [{"type": "Array", "name": "tokens", "description": " Array of token strings."}], "guessedname": "_setTokens", "guessedtype": "function"}, "_keyLeft": {"return": {"type": "Boolean", "description": "<code>false</code> if the event should not be\nprevented."}, "description": "Handler for the left arrow key.", "protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "guessedname": "_keyLeft", "guessedtype": "function"}, "_afterFocus": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "description": "Handles focus events on the bounding box.", "guessedname": "_afterFocus", "guessedtype": "function"}, "_onTokenMouseOut": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "description": "Handles mouseout events on tokens.", "guessedname": "_onTokenMouseOut", "guessedtype": "function"}, "_createItem": {"return": {"type": "Node", "description": "New item."}, "description": "Creates and returns a new token list item.", "protected": "", "params": [{"type": "Object", "name": "options", "description": " (optional) Item options."}], "guessedname": "_createItem", "guessedtype": "function"}, "clear": {"chainable": "", "description": "Removes all tokens.", "guessedname": "clear", "guessedtype": "function"}, "_onTokenBlur": {"protected": "", "params": [{"type": "EventFacade", "name": "e", "description": ""}], "description": "Handles blur events on tokens.", "guessedname": "_onTokenBlur", "guessedtype": "function"}, "remove": {"chainable": "", "params": [{"type": "Number", "name": "index", "description": " 0-based index of the token to remove."}], "description": "Removes the token at the specified index.", "guessedname": "remove", "guessedtype": "function"}, "_renderList": {"protected": "", "description": "Renders the token list.", "guessedname": "_renderList", "guessedtype": "function"}, "_tokenizeValue": {"return": {"type": "Array", "description": "Array of parsed tokens."}, "description": "Tokenizes the value of the specified node (or the passed value if one is\nprovided) and returns an array of tokens. Optionally also adds the tokens\nto the tokenInput's UI.", "protected": "", "params": [{"type": "Node", "name": "node", "description": " (optional) Node whose value should be tokenized. If\nnot provided, the token input node will be used."}, {"type": "String", "name": "value", "description": " (optional) Value to be tokenized. If not specified,\nthe value of the <i>node</i> will be used."}, {"type": "Object", "name": "options", "description": " (optional) Options object with zero or more of\nthe following properties:\n<dl>\n<dt>all (Boolean)</dt>\n<dd>\nIf <code>true</code>, the entire value will be split on the\ndelimiter string and tokenized. If <code>false</code> (the default),\nall but the last token will be tokenized, and the last one will be\nleft in the value.\n</dd>\n<dt>updateUI (Boolean)</dt>\n<dd>\nIf <code>true</code> (the default), tokens parsed out of the value\nwill be added to the tokenInput UI. If <code>false</code>, parsed\ntokens will be returned, but the UI and the <code>tokens</code>\nattribute will not be updated.\n</dd>\n</dl>"}], "guessedname": "_tokenizeValue", "guessedtype": "function"}, "_getSelection": {"return": {"type": "Object", "description": "Object with <code>start</code> and <code>end</code>\nproperties."}, "description": "Returns an object containing the start and end indexes of selected text\nwithin the specified node.", "protected": "", "params": [{"type": "Node", "name": "node", "description": ""}], "guessedname": "_getSelection", "guessedtype": "function"}}, "file": "node-tokeninput.js", "guessedtype": "property", "shortname": "TokenInput", "configs": {"listNode": {"readonly": "", "type": "Node", "description": "Reference to the token list node.", "guessedname": "listNode", "guessedtype": "property"}, "tokenizeOnEnter": {"default": "true", "type": "Boolean", "description": "If <code>true</code>, any text the user has entered in the token\ninput field will be tokenized when the user presses the enter key\nwhile the input field has focus.", "guessedname": "tokenizeOnEnter", "guessedtype": "property"}, "removeButton": {"default": "<code>true</code> for mobile devices, <code>false</code>\nelsewhere.", "type": "Boolean", "description": "If <code>true</code>, each token will have a remove button (in the\nform of a small \"x\") which, when clicked, will remove the token.", "guessedname": "removeButton", "guessedtype": "property"}, "tokens": {"default": "[]", "type": "Array", "description": "Current tokens.", "guessedname": "tokens", "guessedtype": "property"}, "fauxInput": {"default": "false", "type": "Boolean", "description": "<p>\nIf <code>true</code>, the CSS class name\n<code>yui3-tokeninput-fauxinput</code> will be applied to the\nbounding box. When using the Sam skin, this will cause the\nTokenInput's styling to mimic a real input field.\n</p>\n<p>\nNote that this styling may not look entirely faithful to native\ncontrol styling on all browsers and platforms.\n</p>", "guessedname": "fauxInput", "guessedtype": "property"}, "delimiter": {"default": "','", "type": "String", "description": "Token delimiter string. May be a single character or multiple\ncharacters. User input will be split on this string as the user\ntypes, and the delimited values will be turned into tokens.", "guessedname": "delimiter", "guessedtype": "property"}, "tokenizeOnBlur": {"default": "true", "type": "Boolean", "description": "If <code>true</code>, any text the user has entered in the token\ninput field will be tokenized when the input field loses focus.", "guessedname": "tokenizeOnBlur", "guessedtype": "property"}, "boundingBox": {"readonly": "", "type": "Node", "description": "Reference to the bounding box node.", "guessedname": "boundingBox", "guessedtype": "property"}, "inputNode": {"readonly": "", "type": "Node", "description": "Reference to the token input node. This is the visible input node\nthe user can type in to add tokens.", "guessedname": "inputNode", "guessedtype": "property"}, "contentBox": {"readonly": "", "type": "Node", "description": "Reference to the content box node.", "guessedname": "contentBox", "guessedtype": "property"}}, "description": "Node plugin that turns a text input field into a tokenized input field\nsimilar to Cocoa's NSTokenField control."}}, "version": "1.0.0", "namespaces": ["Plugin"]}